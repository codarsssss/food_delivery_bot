from aiogram import types
from database import get_all_users_id
import other


def create_main_buttons(user_id):
    try:
        markup = types.InlineKeyboardMarkup(row_width=True)
        touch_new_year = types.InlineKeyboardButton('–ù–æ–≤–æ–≥–æ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ üéÑ', callback_data='new_year')
        touch_menu = types.InlineKeyboardButton('–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é üç≤ü•óüçñ', callback_data='menu')
        touch_reorder = types.InlineKeyboardButton('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑ ‚úÖ', callback_data='reorder')
        touch_order = types.InlineKeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å üöö', callback_data='order')
        touch_about = types.InlineKeyboardButton('–û –Ω–∞—Å ü§©', callback_data='about')
        if other.flag:
            markup.add(touch_new_year)
        if user_id.chat.id in get_all_users_id():
            markup.add(touch_menu, touch_reorder, touch_order, touch_about)
            return markup
        markup.add(touch_menu, touch_order, touch_about)
        return markup
    except:
        pass


def create_order_buttons():
    try:
        markup = types.InlineKeyboardMarkup(row_width=True)
        touch_week = types.InlineKeyboardButton('–ü–æ–ª–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ - 5 400 —Ä—É–± üß∫', callback_data='5400')
        touch_month = types.InlineKeyboardButton('–ü–æ–ª–æ–≤–∏–Ω–∞ –∫–æ—Ä–∑–∏–Ω—ã - 3 200 —Ä—É–± ü•°', callback_data='3200')
        touch_new_year_order = types.InlineKeyboardButton('üéÖ –ù–æ–≤–æ–≥–æ–¥–Ω—è—è –∫–æ—Ä–∑–∏–Ω–∞ üéÑ', callback_data='new_year_order')
        touch_back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ üîô', callback_data='back')
        markup.add(touch_week, touch_month)
        if other.flag:
            markup.add(touch_new_year_order)
        markup.add(touch_back)
        return markup
    except:
        pass


def create_choice_order_buttons(price):
    try:
        markup = types.InlineKeyboardMarkup(row_width=True)
        pay_now = types.InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω (–ë—É–¥–µ—Ç –ø–æ–∑–∂–µ ‚úçÔ∏è!) üí≥',
                                             callback_data=f'pay_online_off {price}')
        pay_when_shipping = types.InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ üí∏',
                                                       callback_data=f'get_phone {price}')
        touch_back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ üîô', callback_data='order')
        markup.add(pay_now, pay_when_shipping, touch_back)
        return markup
    except:
        pass


def create_get_phone_buttons():
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        touch_phone = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä', request_contact=True)
        markup.add(touch_phone)
        return markup
    except:
        pass


def create_new_year_buttons():
    try:
        markup = types.InlineKeyboardMarkup(row_width=True)
        touch_30 = types.InlineKeyboardButton('30 —á–∏—Å–ª–æ üéâ', callback_data='get_phone 9900')
        touch_31 = types.InlineKeyboardButton('31 —á–∏—Å–ª–æ üéÅ', callback_data='get_phone 10990')
        touch_back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ üîô', callback_data='order')
        markup.add(touch_30, touch_31, touch_back)
        return markup
    except:
        pass


def back_in_main():
    try:
        markup = types.InlineKeyboardMarkup()
        touch_site = types.InlineKeyboardButton('–ù–∞—à —Å–∞–π—Ç üåê', url='https://kubanskiypovar.ru/')
        touch_back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ üîô', callback_data='back')
        markup.add(touch_site, touch_back)
        return markup
    except:
        pass


# –ê–¥–º–∏–Ω—Å–∫–∞—è —á–∞—Å—Ç—å
def create_main_admin_buttons():
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        touch_sending = types.KeyboardButton('–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
        touch_new_year_switch_on = types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ–≥–æ–¥–Ω—é—é –∫–Ω–æ–ø–∫—É')
        touch_new_year_switch_off = types.KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ–≥–æ–¥–Ω—é—é –∫–Ω–æ–ø–∫—É')
        if other.flag:
            markup.add(touch_sending, touch_new_year_switch_off)
            return markup
        markup.add(touch_sending, touch_new_year_switch_on)
        return markup
    except:
        pass


def create_status_delivery_buttons(number):
    try:
        markup = types.InlineKeyboardMarkup(row_width=True)
        touch_delivery = types.InlineKeyboardButton('–ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏', callback_data=f'delivery {number}')
        markup.add(touch_delivery)
        return markup
    except:
        pass


def create_status_ready_buttons(number):
    try:
        markup = types.InlineKeyboardMarkup(row_width=True)
        touch_ready = types.InlineKeyboardButton('–î–æ—Å—Ç–∞–≤–ª–µ–Ω', callback_data=f'ready {number}')
        markup.add(touch_ready)
        return markup
    except:
        pass


def create_approve_sending_buttons():
    try:
        markup = types.InlineKeyboardMarkup(row_width=True)
        touch_approve = types.InlineKeyboardButton('–†–∞–∑–æ—Å–ª–∞—Ç—å', callback_data='sending')
        touch_remake = types.InlineKeyboardButton('–ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å', callback_data='remake')
        markup.add(touch_approve, touch_remake)
        return markup
    except:
        pass
